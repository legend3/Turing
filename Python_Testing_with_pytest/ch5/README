# 搜索插件
    https://docs.pytest.org/en/latest/plugins.html
    https://pypi.python.org
    https://github.com/pytest-dev

# 安装插件
    pip install pytest-cov  ——安装到最新版本
    pip install pytest-cov==2.4.0   ——指定版本
    pip install pytest-cov-2.4.0.tar.gz ——安装tar.gz格式
    pip install pytest_cov-2.4.0-py2.py3-none-any.whl   ——安装any.whl格式
    pip install --no-index --find-links=./some_plugins/ pytest-cov  ——在本地安装
    pip install --no-index --find-links=./some_plugins/ pytest-cov==2.4.0   ——指定版本
    pip install git+https://github.com/pytest-dev/pytest-cov    ——安装Git仓库
    pip install git+https://github.com/pytest-dev/pytest-cov@v2.4.0     ——安装Git仓库中指定版本
    pip install git+https://github.com/pytest-dev/pytest-cov@master     ——安装Gi他仓库指定分支版本


# 许多第三方插件包含相当多的代码。这就是我们使用它们来节省我们自己开发所有代码的时间的原因之一。
# 然而，对于您特定的编码域，您无疑会提出特殊的fixture和修改来帮助您进行测试。
# 通过创建插件，您可以轻松地在几个项目之间共享少量的fixture。
# 通过开发和发布您自己的插件，您可以与多个项目共享这些更改，甚至可能与世界其他地方共享。
# 这很容易做到。在本节中，我们将对pytest行为进行一个小的修改，将其打包为插件，测试它，并研究如何分发它。
# !!!插件可以包含改变pytest行为的钩子函数。因为pytest的目的是允许插件改变pytest的行为方式，所以有很多hook函数可用。
# pytest的钩子函数是在pytest文档站点上指定的。对于我们的例子，我们将创建一个插件来改变测试状态。
# 我们还将包括一个命令行选项来打开这个新行为。我们还将向输出头添加一些文本。
# 具体来说，我们将把所有失败的状态指示器更改为“改进的机会”，将F更改为O，并在页眉中添加感谢运行测试。
# 我们将使用——nice选项来打开行为。为了将行为变化与插件机制的讨论分开，我们将在conftest.py中进行更改，然后将其转换为可分发的插件。
# 您不必以这种方式启动插件。但通常情况下，只打算在一个项目中使用的更改将变得非常有用，可以共享并发展为插件。
# 因此，我们将从向conftest.py文件中添加功能开始，然后在conftest中运行之后。我们将把代码移动到一个包中。让我们回到任务项目。
# 在第30页的《期待异常》中，我们编写了一些测试，确保在有人错误调用API函数时引发异常。看起来我们至少漏掉了几个可能的错误条件。

# 写一个自己的hook插件  ——b
——ch5\b\tasks_proj\tests\func\conftest.py
pytest_report_header()    ——对报告头进行修改
pytest_report_teststatus(report)  ——对报告状态进行修改

# 创建一个可安装的hook插件    ——pytest-nice
创建一个插件的目录pytest-nice
创建一个原先在conftest.py文件中的hook函数的py文件
创建一个setup

# 测试插件  ——pytest-nice
pytester、testdir的使用

# 创建一个发布包.tat.gz
打包到本地
cd /path/to/code/ch5/pytest-nice
python setup.py sdist

打包安装到(其他)项目

发布的PyPI
pip install cookiecutter
cookiecutter https://github.com/pytest-dev/cookiecutter-pytest-plugin
