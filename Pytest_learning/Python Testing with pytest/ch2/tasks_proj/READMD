——test_api_exceptions.py
    1.with pytest.raises(TypeError):函数的使用、场景
        函数代码块中的任何内容都应该引发一个TypeError异常。
        如果没有引发异常，则测试失败;如果测试引发另一个异常，则意味代码执行失败
        with pytest.raises(TypeError) as e:
            获取、判断被测试的代码里自定义的异常是否属实
    2.初步认识mark Test，“冒烟”测试案例
        @pytest.mark.smoke      ———— @pytest.mark.命名

——test_add.py
    1.mark Test的setup、yield、teardown设置
    2.autouse的作用及设置

——test_unique_id_X.py
    1.test_unique_id_1.py场景前提
    2.test_unique_id_2.py使用@pytest.mark.skip(reason='misunderstood the API')的作用及使用场景
    3.test_unique_id_3.py使用@pytest.mark.skipif(tasks.__version__ < '0.2.0',reason='not supported until version 0.2.0')的作用及使用场景、r参数的使用、与skip的区别
    4.test_unique_id_4.py，预计一个测试必是错误的时，@pytest.mark.xfail(tasks.__version__ < '0.2.0',reason='not supported until version 0.2.0')的使用

——Running a Subset of Tests
    如何运行各种文件中测试子集的方式
    -k参数的使用

——test_add_variety.py参数化测试
    1.单一参数场景
    2.@pytest.mark.parametrize参数化；将任务作为元组传递进来
    3.将任务列表移动到函数外部的一个变量
    5.ids的使用
    6.pytest.param(<Value>,id=xxx)给列表数据加id


——函数总结：
1.判断是否同一类型
        isinstance()
2.判断对象是否存在
        _tasksdb is None
3.